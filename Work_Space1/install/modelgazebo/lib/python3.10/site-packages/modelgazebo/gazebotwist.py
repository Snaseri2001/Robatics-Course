import rclpy
from rclpy.node import Node
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist

class Controller(Node):
    def __init__(self):
        super().__init__('controller')
        self.subscriber= self.create_subscription(
            LaserScan,
            "/lidar",
            self.feedback,
            10)
        
        self.publisher = self.create_publisher(Twist,
            "/cmd_vel",
            10)
          
            
    
    def feedback(self, msg):
        
        position = Twist()

        for i in range(len(msg.ranges)):
            if msg.ranges[i] < 0.5:
                self.get_logger().info(f'{msg.ranges[i]}')
        	    position.linear.x = -1.0
                position.angular.z = -1.0
            break
        
        position.linear.x = -1.0
            
            
      
    
            

        self.publish_robot.publish(position)
        
        

def main(args=None):
    rclpy.init(args=args)

    controller = Controller()

    rclpy.spin(controller)

    controller.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
